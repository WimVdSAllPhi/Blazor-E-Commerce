@inject IAddressService AddressService

@if (address == null)
{
    <span>
        You haven't specified a delivery address, yet. <br />
        <button class="btn btn-info" @onclick="InitAddress">Add an address?</button>
    </span>
}
else if (!editAddress)
{
    <p>
        <span>@address.Street @address.StreetNr</span><br />
        <span>@address.City, @address.Country @address.Zip</span><br />
    </p>

    <button class="btn btn-primary" @onclick="EditAddress">Edit</button>
}
else
{
    <EditForm Model="address" OnValidSubmit="SubmitAddress" class="text-start">
        <DataAnnotationsValidator />

        <div class="form-group row mb-3">
            <label for="street" class="@LabelClass">Street</label>
            <div class="@DivInputClass">
                <InputText id="street" @bind-Value="address.Street" class="form-control" />
                <ValidationMessage For="@(() => address.Street)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            <label for="streetNr" class="@LabelClass">Street Nr</label>
            <div class="@DivInputClass">
                <InputText id="streetNr" @bind-Value="address.StreetNr" class="form-control" />
                <ValidationMessage For="@(() => address.StreetNr)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            <label for="city" class="@LabelClass">City</label>
            <div class="@DivInputClass">
                <InputText id="city" @bind-Value="address.City" class="form-control" />
                <ValidationMessage For="@(() => address.City)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            <label for="zip" class="@LabelClass">ZIP/Postal Code</label>
            <div class="@DivInputClass">
                <InputText id="zip" @bind-Value="address.Zip" class="form-control" />
                <ValidationMessage For="@(() => address.Zip)" />
            </div>
        </div>

        <div class="form-group row mb-3">
            <label for="country" class="@LabelClass">Country</label>
            <div class="@DivInputClass">
                <input id="country" class="form-control" readonly value="@address.Country " />
            </div>
        </div>

        <div class="form-group row mb-3">
            <div class="@DivButtonClass">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEditAddress">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<bool> OnAddressChange { get; set; }

    Address address = null;
    bool editAddress = false;
    bool isInit = false;

    [Parameter]
    public string? LabelClass { get; set; } = "col-sm-4 col-md-3 col-lg-2 col-form-label";

    [Parameter]
    public string? DivInputClass { get; set; } = "col-sm-8 col-md-9 col-lg-10";

    [Parameter]
    public string? DivButtonClass { get; set; } = "col-sm-8 col-md-9 col-lg-10 offset-sm-4 offset-md-3 offset-lg-2";

    protected override async Task OnInitializedAsync()
    {
        address = await AddressService.GetAddress();

        if (address != null && !editAddress)
        {
            await OnAddressChange.InvokeAsync(true);
        }
    }

    private async Task SubmitAddress()
    {
        editAddress = false;
        address = await AddressService.AddOrUpdateAddress(address);

        if (address != null && !editAddress)
        {
            await OnAddressChange.InvokeAsync(true);
        }
    }

    private void InitAddress()
    {
        address = new Address();
        editAddress = true;
    }

    private void EditAddress()
    {
        editAddress = true;
    }

    private async Task CancelEditAddress()
    {
        editAddress = false;
        address = await AddressService.GetAddress();
    }
}
