@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@using System.IO

@if (IsTop)
{
    @if (ImgUrls == null || ImgUrls.Count <= 0)
    {
        <div class="mb-0 text-center">
            <img src="@NoImageUrl" style="@ImageStyle" />
        </div>
    }
    else
    {
        <div class="mb-0 text-center">
            @foreach (var imgUrl in ImgUrls)
            {
                <div class="hoverImage">
                    <img src="@imgUrl" style="@ImageStyle" />
                    <button class="btn btn-danger delete" @onclick="(() => DeleteImage(imgUrl))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            }
        </div>
    }
}

<div @ref="dropZoneElement" class="drop-zone">
    <InputFile OnChange="@OnChange" @ref="inputFile" class="form-control" multiple />
</div>

@if (!IsTop)
{
    @if (ImgUrls == null || ImgUrls.Count <= 0)
    {
        <div class="mb-0 text-center">
            <img src="@NoImageUrl" style="@ImageStyle" />
        </div>
    }
    else
    {
        <div class="mb-0 text-center">
            @foreach (var imgUrl in ImgUrls)
            {
                <div class="hoverImage">
                    <img src="@imgUrl" style="@ImageStyle" />
                    <button class="btn btn-danger delete" @onclick="(() => DeleteImage(imgUrl))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            }
        </div>
    }
}

@code {
    [Parameter, EditorRequired]
    public List<string> ImgUrls { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<List<string>> OnImageChange { get; set; }

    [Parameter]
    public string NoImageUrl { get; set; } = "Images/noImage.jpg";

    [Parameter]
    public bool IsTop { get; set; } = false;

    [Parameter]
    public string ImageStyle { get; set; } = string.Empty;

    ElementReference dropZoneElement;
    InputFile? inputFile;

    IJSObjectReference? _module;
    IJSObjectReference? _dropZoneInstance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./DropZone.js");
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile!.Element);
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        if (ImgUrls == null)
        {
            ImgUrls = new List<string>();
        }

        var files = e.GetMultipleFiles();

        foreach (var file in files)
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            var imgUrl = "data:" + file.ContentType + ";base64," + Convert.ToBase64String(ms.ToArray());

            ImgUrls.Add(imgUrl);

        }
        await OnImageChange.InvokeAsync(ImgUrls);
    }

    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }

    private async Task DeleteImage(string imgUrl)
    {
        if (!string.IsNullOrWhiteSpace(imgUrl))
        {
            ImgUrls.Remove(imgUrl);

            await OnImageChange.InvokeAsync(ImgUrls);
        }
    }
}
